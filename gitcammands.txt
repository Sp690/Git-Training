//Starting a project
 Git init
Create a local repository
$ git init <Repo Name>
 Git clone
Make a local copy of the server repository.
$ git clone <remote Url>
 //Local changes
 Git add
Add a file to staging (Index) area
$ git add Filename
Add all files of a repo to staging (Index) area
$ git add*
 Git commit
Record or snapshots the file permanently in the version history with a
message
$ git commit -m " Commit Message"
 //Track changes
 Git diff
Track the changes that have not been staged:
$ git diff
Track the changes that have staged but not committed:
$ git diff --staged
Track the changes after committing a file:
$ git diff HEAD
Track the changes between two commits:
$ git diff <commit1-sha> <commit2-sha>
Git Diff Branches:
$ git diff <branch 1> < branch 2>
 Git status
Display the state of the working directory and the staging area.
$ git status
 Git show
Shows objects:
$ git show <options> <objects>
 //Commit History
 Git log
Display the most recent commits and the status of the head:
$ git log
Display the output as one commit per line:
$ git log –oneline
Displays the files that have been modified:
$ git log –stat
Display the modified files with location:
$ git log -p
 Git blame
Display the modification on each line of a file:
$ git blame <file name>
 Ignoring files
 .gitignore
Specify intentionally untracked files that Git should ignore.
Create .gitignore:
$ touch .gitignore
List the ignored files:
$ git ls-files -i --exclude-standard
// Branching
 Git branch
Create branch:
$ git branch <branch name>
List Branch:
$ git branch --list
Delete Branch:
$ git branch -d<branch name>
Delete a remote Branch:
$ git push origin -delete <branch name>
Rename Branch:
$ git branch -m <old branch name><new branch name>
 Git checkout
Switch between branches in a repository.
Switch to a particular branch:
$ git checkout <branch name>
Create a new branch and switch to it:
$ git checkout -b <branchname>
Checkout a Remote branch:
$ git checkout <remotebranch>
//Merging
 Git merge
Merge the branches:
$ git merge <branch name>
Merge the specified commit to currently active branch:
$ git merge <commit>
 Git rebase
Apply a sequence of commits from distinct branches into a final commit.
$ git rebase <branch name>
Continue the rebasing process:
$ git rebase –continue
Abort the rebasing process:
$ git rebase --skip
//Pushing Updates
 Git push
Transfer the commits from your local repository to a remote server.
Push data to remote server:
$ git push origin master
Force push data:
$ git push <remote><branch> -f
Delete a remote branch by push command:
$ git push origin -delete edited
// Pulling updates
 Git pull
Pull the data from the server:
$ git pull origin master
Pull a remote branch:
$ git pull <remote branch URL>
 Git fetch
Downloads branches and tags from one or more repositories.
Fetch the remote repository:
$ git fetch< repository Url>
Fetch a specific branch:
$ git fetch <branch URL><branch name>
Fetch all the branches simultaneously:
$ git fetch –all
Synchronize the local repository:
$ git fetch origin
